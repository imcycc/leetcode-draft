// 房间中有 n 只已经打开的灯泡，编号从 1 到 n 。墙上挂着 4 个开关 。

// 这 4 个开关各自都具有不同的功能，其中：

// 开关 1 ：反转当前所有灯的状态（即开变为关，关变为开）
// 开关 2 ：反转编号为偶数的灯的状态（即 2, 4, ...）
// 开关 3 ：反转编号为奇数的灯的状态（即 1, 3, ...）
// 开关 4 ：反转编号为 j = 3k + 1 的灯的状态，其中 k = 0, 1, 2, ...（即 1, 4, 7, 10, ...）
// 你必须 恰好 按压开关 presses 次。每次按压，你都需要从 4 个开关中选出一个来执行按压操作。

// 给你两个整数 n 和 presses ，执行完所有按压之后，返回 不同可能状态 的数量。
/**
 * @param {number} n
 * @param {number} presses
 * @return {number}
 */
var flipLights = function (n, presses) {
  if (presses === 0) return 1;
  // 分析:
  // 按两下，相当于没按
  // 开关 2+3=1 1+3=2 1+2=3
  // 所以不同的结果必然有限
  // n=1or2 比较特殊，
  if (n === 1) return 2; // 改1 不改1
  if (n === 2) return presses === 1 ? 3 : 4; // 改1 改2 都改 都不改

  // >=3  就可以找规律
  // 最大情况  - 1 2 3 4 14 24 34   8种
  // presses
  // 1: 1 2 3 4   4种
  // 2: - 1(2+3) 2(1+3) 3(1+2) 14 24 34    7种
  // 3: - 1 2 3 4 14(2,3,4) 24(1,3,4) 34(1,2,4) 8种
  // 4: 2的7种 4(1,2,3,4) 8种
  // >4: 8种
  // 所以：
  if (presses === 1) {
    return 4;
  } else if (presses === 2) {
    return 7;
  } else {
    return 8;
  }
};
